[tool.poetry]
name = "python-reference-project"
version = "0.1.0"
description = "A python reference project"
authors = [
    "Ivo Woltring <ivo.woltring@ordina.nl>",
]
license = "Apache 2.0"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
uvicorn = "^0.29.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
flake8 = "^7.0.0"
isort = "^5.13.2"
black = "^24.1.1"
pylint = "^3.0.3"
mypy = "^1.8.0"
pytest-cov = "^4.1.0"
flake8-bugbear = "^24.2.6"
poethepoet = "^0.25.0"
pre-commit = "^3.7.0"
pylint-google-style-guide-imports-enforcing = "^1.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"

[tool.poe.tasks]
# General project tasks
dev = "uvicorn main:app --reload"
install-hooks = "pre-commit install"
setup = ["install-hooks"]

# Docker related tasks
build = "docker build -t OrdinaGroup/python-reference-project ."
up = "docker run -it --rm -p 8001:8000 --name python-reference-project OrdinaGroup/python-reference-project:latest"
down = "docker stop python-reference-project"
shell = "docker run -it --rm -p 8001:8000 --name python-reference-project OrdinaGroup/python-reference-project:latest sh"
logs = "docker logs --tail=25 python-reference-project"
rebuild = ["down", "build", "up"]

# QA-related tasks
flake8 = "flake8 src/ tests/"
pylint = "pylint src/ tests/"
black = "black src/ tests/"
black-check = "black --check src/ tests/"
isort = "isort src/ tests/"
isort-check = "isort --check src/ tests/"
mypy = "mypy"
unittests = "pytest -m \"not e2e_test and not integration_test\""
all-tests = "pytest"
reformat = ["black", "isort"]
# This pre-commit check command uses the regular commands for isort and
# black. This means that if the pre-commit hook fails due to formatting
# issues, files will be already be formatted. This saves running a
# command to fix the formatting before attempting to commit again.
pre-commit-check = [
    "isort",
    "black",
    "flake8",
    "mypy",
    "pylint",
    "unittests"
]
check = [
    "isort-check",
    "black-check",
    "flake8",
    "mypy",
    "pylint",
    "unittests"
]

[tool.pytest.ini_options]
pythonpath = "src"
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
]
markers = [
    "integration_test: mark a test as an integration test",
    "e2e_test: mark a test as an end-to-end test",
]

[tool.mypy]
python_version = "3.12"
files = ["src/", "tests/"]

# Disallow dynamic typing
disallow_any_unimported = true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_generics = true
disallow_subclassing_any = true

# Untyped definition and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# None and Optional handling
implicit_optional = false

# Configure warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true

# Miscellaneous strictness flags
local_partial_types = true
strict = true

[tool.pylint.main]
py-version = "3.12"  # Change to your minimal Python-version
fail-under = 10
jobs = 0  # Autodetect the supported number of parallel jobs
recursive = true
suggestion-mode = true
load-plugins = ["pylint_google_style_guide_imports_enforcing"]

[tool.pylint.basic]
good-names = ["_", "i", "j", "k", "exc", "ex", "e"]
include-naming-hint = true

# These naming convents match those recommended in the Google Python
# Style Guide.
# See: https://google.github.io/styleguide/pyguide.html#3164-guidelines-derived-from-guidos-recommendations
module-naming-style = "snake_case"
class-naming-style = "PascalCase"
function-naming-style = "snake_case"
const-naming-style = "UPPER_CASE"
class-const-naming-style = "UPPER_CASE"
class-attribute-naming-style = "snake_case"
attr-naming-style = "snake_case"
method-naming-style = "snake_case"
argument-naming-style = "snake_case"
variable-naming-style = "snake_case"
inlinevar-naming-style = "snake_case"

# List of member names that should not trigger a "protected member"
# warning. All excluded names, except `os._exit`, are part of the
# interface for `collections.namedtuple`, which does not follow the
# regular leading underscore convention.
# See: https://docs.python.org/3/library/collections.html#collections.namedtuple
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_make",
    "_field_defaults",
    "os._exit",
]

[tool.pylint.design]
max-statements = 30

[tool.pylint.format]
max-line-length = 88
max-module-lines = 1000
single-line-class-stmt = false
single-line-if-stmt = false

[tool.pylint."messages control"]
# Enable checkers that detect erroneous or undesirable suppresions
enable = [
    "bad-inline-option",
    "deprecated-pragma",
    "file-ignored",
    "useless-suppression",
]

[tool.pylint.string]
check-quote-consistency = true

[tool.pylint.typecheck]
ignore-none = false

[tool.pylint.variables]
dummy-variables-rgx = "^_.*"
ignored-argument-names = "^_.*"
